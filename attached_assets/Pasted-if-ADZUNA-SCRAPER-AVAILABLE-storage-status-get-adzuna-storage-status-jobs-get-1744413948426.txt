if ADZUNA_SCRAPER_AVAILABLE:
        storage_status = get_adzuna_storage_status()
        jobs = get_adzuna_jobs(days=30)
        recent_jobs_list = []
        for job in jobs:
            if job.posted_date:
                try:
                    job_date = datetime.fromisoformat(job.posted_date.split("T")[0]) if isinstance(job.posted_date, str) else job.posted_date
                    if (datetime.now() - job_date).days <= 7:
                        recent_jobs_list.append(job)
                except Exception:
                    pass
        remote_jobs_list = [job for job in jobs if job.is_remote]
        scheduler_status = get_scheduler_status() if ADZUNA_SCHEDULER_AVAILABLE else {"is_running": False, "config": {}}
        try:
            from adzuna_scraper import config as adzuna_config
            scraper_config = {
                "rate_limit_calls": adzuna_config.rate_limit_calls,
                "rate_limit_period": adzuna_config.rate_limit_period,
                "call_delay": adzuna_config.call_delay
            }
        except ImportError:
            scraper_config = {"rate_limit_calls": 20, "rate_limit_period": 60, "call_delay": 3}

        resume_id = session.get('resume_id')
        resume_embeddings = None
        if resume_id:
            active_resume = resume_storage.get_resume(resume_id)
            if active_resume and "metadata" in active_resume:
                metadata = active_resume["metadata"]
                resume_embeddings = {
                    "narrative": np.array(metadata["embedding_narrative"]),
                    "skills": np.array(metadata["embedding_skills"])
                }
        if resume_embeddings:
            matches = find_matching_jobs(resume_embeddings, jobs)
            for match in matches:
                match.job.match_percentage = int(match.similarity_score * 100)
        else:
            for job in jobs:
                job.match_percentage = None
        jobs_dict = {i: job.to_dict() for i, job in enumerate(jobs)}
        recent_jobs_dict = {i: job.to_dict() for i, job in enumerate(recent_jobs_list)}
        remote_jobs_dict = {i: job.to_dict() for i, job in enumerate(remote_jobs_list)}
        status.update({
            "storage_status": storage_status,
            "jobs": jobs_dict,
            "recent_jobs_list": recent_jobs_dict,
            "remote_jobs_list": remote_jobs_dict,
            "total_jobs": len(jobs),
            "recent_jobs": len(recent_jobs_list),
            "last_sync": storage_status.get("last_sync", "Never"),
            "scheduler_status": scheduler_status,
            "next_sync": scheduler_status.get("next_run", "Not scheduled"),
            "keywords": keywords,
            "location": location,
            "country": country,
            "max_days_old": max_days_old,
            "remote_only": remote_only,
            "daily_sync_time": daily_sync_time,
            "call_delay": scraper_config.get("call_delay", 3),
            "rate_limit_calls": scraper_config.get("rate_limit_calls", 20),
            "rate_limit_period": scraper_config.get("rate_limit_period", 60)
        })
    status["stored_resumes"] = resume_storage.get_all_resumes()
    return render_template('index.html', **status)